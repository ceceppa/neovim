snippet ir
	import * as React from 'react';

snippet ur
	const ${1} = React.useRef(${2})

snippet us
	const [${1}, set${2}${1}] = React.useState(${3})

snippet ue
	React.useEffect(() =>{
		${1}
	}, []);

snippet rc
	import * as React from 'react';

	export const ${1} = () => {
		${2}
	}

snippet rfc
	type ${1}Props = {};

	export const ${1}: React.FC<${1}Props> = ({}) => {
	  ${2}

	  return (
		<></>
	  );
	};

snippet fc
	React.FC<${1}>

snippet fcc
	React.FC<React.PropsWithChildren<${1}>>


snippet rfc_type
	import * as React from 'react';

	type ${1}Props = {}

	export const ${1}: React.FC<${1}Props> = ({}) => {
		${2}
	}


snippet uas
	const ${1} = useAnimatedStyle(() => {
		return {
			$2
		};
	});

snippet usv
	const ${1} = useSharedValue(${2});

snippet jdescbase
	beforeEach(() => {
		jest.clearAllMocks();
	});

	describe('${1}', () => {
		it('${2}', async () => {
			${3}
		});
	});

snippet jdesc
	describe('${1}', () => {
		it('${2}', async () => {
			${3}
		});
	});

snippet jit
	it('${1}', async () => {
		${2}
	});

snippet jbe
	beforeEach(() => {
		${1}
	});

snippet jbeclear
	beforeEach(() => {
		jest.clearAllMocks();
	});

snippet asyncarrowfn
	const ${1} = async () => {
		${2}
	}

snippet asyncfn
	async function() {
		${1}
	}

snippet jfn
	jest.fn();

	
snippet styles
	import { StyleSheet } from 'react-native'

	const styles = StyleSheet.create({
		${1}
	})

snippet component
	import * as React from "react";
	import { StyleSheet } from "react-native";

	type ${1}Props = {};

	export const ${1}: React.FC<${1}Props> = ({}) => {
	  ${2}

	  return (
	    <></>
  	  );
	};

	const styles = StyleSheet.create({});

snippet useRoute
	const { params } = useRoute<RouteProp<$1, '$2'>>();

snippet ciao
    console.info('ciao')
